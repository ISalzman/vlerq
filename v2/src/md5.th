# MD5 implementation in Thrill

variable Ma variable Mb variable Mc variable Md 
variable Mbuf   

: f()  rot dup not rot and rrot and or ;
: g()  tuck not and rrot and or ;
: h()  xor xor ;
: i()  not rot or xor ;

: transform #- Ma Mb Mc Md 
  { #round1
    Mb Ma Mb Mc Md f() + 0xd76aa478 Mbuf 0x0 + exec + + 0x07 rolq + to Ma 
    Ma Md Ma Mb Mc f() + 0xe8c7b756 Mbuf 0x1 + exec + + 0x0c rolq + to Md 
    Md Mc Md Ma Mb f() + 0x242070db Mbuf 0x2 + exec + + 0x11 rolq + to Mc 
    Mc Mb Mc Md Ma f() + 0xc1bdceee Mbuf 0x3 + exec + + 0x16 rolq + to Mb 
    Mb Ma Mb Mc Md f() + 0xf57c0faf Mbuf 0x4 + exec + + 0x07 rolq + to Ma 
    Ma Md Ma Mb Mc f() + 0x4787c62a Mbuf 0x5 + exec + + 0x0c rolq + to Md 
    Md Mc Md Ma Mb f() + 0xa8304613 Mbuf 0x6 + exec + + 0x11 rolq + to Mc 
    Mc Mb Mc Md Ma f() + 0xfd469501 Mbuf 0x7 + exec + + 0x16 rolq + to Mb 
    Mb Ma Mb Mc Md f() + 0x698098d8 Mbuf 0x8 + exec + + 0x07 rolq + to Ma 
    Ma Md Ma Mb Mc f() + 0x8b44f7af Mbuf 0x9 + exec + + 0x0c rolq + to Md 
    Md Mc Md Ma Mb f() + 0xffff5bb1 Mbuf 0xa + exec + + 0x11 rolq + to Mc 
    Mc Mb Mc Md Ma f() + 0x895cd7be Mbuf 0xb + exec + + 0x16 rolq + to Mb 
    Mb Ma Mb Mc Md f() + 0x6b901122 Mbuf 0xc + exec + + 0x07 rolq + to Ma 
    Ma Md Ma Mb Mc f() + 0xfd987193 Mbuf 0xd + exec + + 0x0c rolq + to Md 
    Md Mc Md Ma Mb f() + 0xa679438e Mbuf 0xe + exec + + 0x11 rolq + to Mc 
    Mc Mb Mc Md Ma f() + 0x49b40821 Mbuf 0xf + exec + + 0x16 rolq + to Mb } exec
  { #round2
    Mb Ma Mb Mc Md g() + 0xf61e2562 Mbuf 0x1 + exec + + 0x05 rolq + to Ma 
    Ma Md Ma Mb Mc g() + 0xc040b340 Mbuf 0x6 + exec + + 0x09 rolq + to Md 
    Md Mc Md Ma Mb g() + 0x265e5a51 Mbuf 0xb + exec + + 0x0e rolq + to Mc 
    Mc Mb Mc Md Ma g() + 0xe9b6c7aa Mbuf 0x0 + exec + + 0x14 rolq + to Mb 
    Mb Ma Mb Mc Md g() + 0xd62f105d Mbuf 0x5 + exec + + 0x05 rolq + to Ma 
    Ma Md Ma Mb Mc g() + 0x02441453 Mbuf 0xa + exec + + 0x09 rolq + to Md 
    Md Mc Md Ma Mb g() + 0xd8a1e681 Mbuf 0xf + exec + + 0x0e rolq + to Mc 
    Mc Mb Mc Md Ma g() + 0xe7d3fbc8 Mbuf 0x4 + exec + + 0x14 rolq + to Mb 
    Mb Ma Mb Mc Md g() + 0x21e1cde6 Mbuf 0x9 + exec + + 0x05 rolq + to Ma 
    Ma Md Ma Mb Mc g() + 0xc33707d6 Mbuf 0xe + exec + + 0x09 rolq + to Md 
    Md Mc Md Ma Mb g() + 0xf4d50d87 Mbuf 0x3 + exec + + 0x0e rolq + to Mc 
    Mc Mb Mc Md Ma g() + 0x455a14ed Mbuf 0x8 + exec + + 0x14 rolq + to Mb 
    Mb Ma Mb Mc Md g() + 0xa9e3e905 Mbuf 0xd + exec + + 0x05 rolq + to Ma 
    Ma Md Ma Mb Mc g() + 0xfcefa3f8 Mbuf 0x2 + exec + + 0x09 rolq + to Md 
    Md Mc Md Ma Mb g() + 0x676f02d9 Mbuf 0x7 + exec + + 0x0e rolq + to Mc 
    Mc Mb Mc Md Ma g() + 0x8d2a4c8a Mbuf 0xc + exec + + 0x14 rolq + to Mb } exec
  { #round3
    Mb Ma Mb Mc Md h() + 0xfffa3942 Mbuf 0x5 + exec + + 0x04 rolq + to Ma 
    Ma Md Ma Mb Mc h() + 0x8771f681 Mbuf 0x8 + exec + + 0x0b rolq + to Md 
    Md Mc Md Ma Mb h() + 0x6d9d6122 Mbuf 0xb + exec + + 0x10 rolq + to Mc 
    Mc Mb Mc Md Ma h() + 0xfde5380c Mbuf 0xe + exec + + 0x17 rolq + to Mb 
    Mb Ma Mb Mc Md h() + 0xa4beea44 Mbuf 0x1 + exec + + 0x04 rolq + to Ma 
    Ma Md Ma Mb Mc h() + 0x4bdecfa9 Mbuf 0x4 + exec + + 0x0b rolq + to Md 
    Md Mc Md Ma Mb h() + 0xf6bb4b60 Mbuf 0x7 + exec + + 0x10 rolq + to Mc 
    Mc Mb Mc Md Ma h() + 0xbebfbc70 Mbuf 0xa + exec + + 0x17 rolq + to Mb 
    Mb Ma Mb Mc Md h() + 0x289b7ec6 Mbuf 0xd + exec + + 0x04 rolq + to Ma 
    Ma Md Ma Mb Mc h() + 0xeaa127fa Mbuf 0x0 + exec + + 0x0b rolq + to Md 
    Md Mc Md Ma Mb h() + 0xd4ef3085 Mbuf 0x3 + exec + + 0x10 rolq + to Mc 
    Mc Mb Mc Md Ma h() + 0x04881d05 Mbuf 0x6 + exec + + 0x17 rolq + to Mb 
    Mb Ma Mb Mc Md h() + 0xd9d4d039 Mbuf 0x9 + exec + + 0x04 rolq + to Ma 
    Ma Md Ma Mb Mc h() + 0xe6db99e5 Mbuf 0xc + exec + + 0x0b rolq + to Md 
    Md Mc Md Ma Mb h() + 0x1fa27cf8 Mbuf 0xf + exec + + 0x10 rolq + to Mc 
    Mc Mb Mc Md Ma h() + 0xc4ac5665 Mbuf 0x2 + exec + + 0x17 rolq + to Mb } exec
  { #round4
    Mb Ma Mb Mc Md i() + 0xf4292244 Mbuf 0x0 + exec + + 0x06 rolq + to Ma 
    Ma Md Ma Mb Mc i() + 0x432aff97 Mbuf 0x7 + exec + + 0x0a rolq + to Md 
    Md Mc Md Ma Mb i() + 0xab9423a7 Mbuf 0xe + exec + + 0x0f rolq + to Mc 
    Mc Mb Mc Md Ma i() + 0xfc93a039 Mbuf 0x5 + exec + + 0x15 rolq + to Mb 
    Mb Ma Mb Mc Md i() + 0x655b59c3 Mbuf 0xc + exec + + 0x06 rolq + to Ma 
    Ma Md Ma Mb Mc i() + 0x8f0ccc92 Mbuf 0x3 + exec + + 0x0a rolq + to Md 
    Md Mc Md Ma Mb i() + 0xffeff47d Mbuf 0xa + exec + + 0x0f rolq + to Mc 
    Mc Mb Mc Md Ma i() + 0x85845dd1 Mbuf 0x1 + exec + + 0x15 rolq + to Mb 
    Mb Ma Mb Mc Md i() + 0x6fa87e4f Mbuf 0x8 + exec + + 0x06 rolq + to Ma 
    Ma Md Ma Mb Mc i() + 0xfe2ce6e0 Mbuf 0xf + exec + + 0x0a rolq + to Md 
    Md Mc Md Ma Mb i() + 0xa3014314 Mbuf 0x6 + exec + + 0x0f rolq + to Mc 
    Mc Mb Mc Md Ma i() + 0x4e0811a1 Mbuf 0xd + exec + + 0x15 rolq + to Mb 
    Mb Ma Mb Mc Md i() + 0xf7537e82 Mbuf 0x4 + exec + + 0x06 rolq + to Ma 
    Ma Md Ma Mb Mc i() + 0xbd3af235 Mbuf 0xb + exec + + 0x0a rolq + to Md 
    Md Mc Md Ma Mb i() + 0x2ad7d2bb Mbuf 0x2 + exec + + 0x0f rolq + to Mc 
    Mc Mb Mc Md Ma i() + 0xeb86d391 Mbuf 0x9 + exec + + 0x15 rolq + to Mb } exec
  +to Md +to Mc +to Mb +to Ma ;

: md5ini #-
    0x67452301 to Ma 0xefcdab89 to Mb 0x98badcfe to Mc 0x10325476 to Md ;

: setg_le #b-b bigend if xv6r else xv6i then over setg ;
: dofullblocks #pn-pn 2dup nsha setg_le b2p to Mbuf dup 64 div 
    { drop transform 16 +to Mbuf } rep* 63 and swap Mbuf 4 * + swap ;

: clrbuf #- 64 vnew b2p to Mbuf ;
: dofinal #pn- 2dup clrbuf tuck Mbuf swap
    #sdn-sd { drop over c@ 255 and over ! swap 1+ swap 1+ } rep* 
    nip 128 rrot rbox ! 
    Mbuf b2o lit @ rep* 16 { >r 8 << + 8 << + 8 << + Mbuf 15 r> - b! } rep* 
    dup 55 > if transform clrbuf then drop tlen 8 * Mbuf 14 b! transform ;

: md5full #s- md5ini b2p dup tlen dofullblocks dofinal ;

: bytes #i-abcd 3 { drop dup 255 and swap 8 >> } rep* 255 and ;
: md5result #-b Ma bytes Mb bytes Mc bytes Md bytes 16 pack ;
