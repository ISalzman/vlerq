# Makefile -=- Build and test commands for Vlerq

l = ../lang
n = ../noarch
s = ../src
t = ../tests
u = ../util

D = -DTNO_DYN
W = -Wall -pedantic -Wno-long-long
X = $s/xbit.h $s/xdez.h $s/xdyn.h $s/xfor.h $s/xmmf.h $s/xops.h $n/xpar.h \
    $s/xstr.h $s/xtcl.h $s/xvec.h

TCL = tclkit

dyn = -shared -fPIC
dll = .so
exe = 
stx = 
ifeq ($(ARCHSUFFIX),.macosx)
  dyn = -dynamiclib -fno-common
  dll = .dylib
  stx = -x
endif
ifeq ($(ARCHSUFFIX),.win32)
  dyn = -shared
  dll = .dll
  exe = .exe
endif

.PHONY: all all-na all-vq clean default ratcl regen test thrive thrive-lua \
	thrive-py thrive-rb thrive-tcl wipe-n 

default: vq all-na
	echo info stats | vq

all: min-vq all-vq all-na

test: thrive $n/expr.db $n/sql.db $n/gtest.db $n/mkblk.db \
		$n/words1.th $n/words2.th vq vqx dynext.tde
	$(TCL) $t/all.tcl

clean:
	rm -rf dynext.tde lite.tmp rainit.tmp ratcl$(dll) ratcl.rom \
		ratcl.vfs thrive$(dll) thrive-lua thrive-py thrive-rb \
		thrive-tcl vq$(exe) vq-debug$(exe) vq-fast$(exe) \
		vq-tiny$(exe) vq-static$(exe) vq.rom vq.vfs vqx$(exe) \
		vqx.kit vqx.vfs

regen: wipe-n all-na

# standalone

min-vq: vq-debug
	echo '0 exit exec -1 syst [[ "OK\n" 3 syst' | vq-debug

all-vq: vq-debug vq-fast vq-tiny vq-static vq vqx
	for i in vq-debug vq-fast vq-tiny vq-static; \
	  do echo $$i: && (cat $s/words.th; echo info stats) | $$i; done
	echo info stats | vq
	vqx -v

vq: vq-debug $n/vq.kit 
	cp vq-debug$(exe) $@$(exe) && cat $n/vq.kit >>$@$(exe)
vqx: vq-fast $n/vqx.kit
	cp vq-fast$(exe) $@$(exe) && cat $n/vqx.kit >>$@$(exe)

vq-debug: $s/main.c $s/sysdep.h $s/thrive.h $X
	$(CC) -g -I$n -DTDEBUG $D $W $s/main.c -o $@$(exe)
vq-fast: $s/main.c $s/sysdep.h $s/thrive.h $X
	$(CC) -O2 -I$n $D $W $s/main.c -s -o $@$(exe)
vq-tiny: $s/main.c $s/sysdep.h $s/thrive.h $X
	$(CC) -Os -fomit-frame-pointer -I$n $D $W $s/main.c -s -o $@$(exe)
	upx -qq --best $@$(exe)
vq-static: $s/main.c $s/sysdep.h $s/thrive.h $X
	diet $(CC) -O2 -I$n $D $W $s/main.c -s -o $@$(exe)

# tcl

thrive: thrive$(dll)

thrive$(dll): $s/tcl.c $s/thrive.h $X
	$(CC) $(dyn) -g -I$n -DTDEBUG $W $s/tcl.c -o $@ -ldl

thrive-tcl:
	rm -rf $@ && cp -r $l/tcl/. $@ && rm -rf $@/CVS $@/*/CVS
	mkdir -p $@/doc $@/generic
	$u/includer.tcl $s/tcl.c >$@/generic/thrive.c
	$u/includer.tcl $s/lite.tcl >lite.tmp
	$u/makerom.tcl lite.tmp $@/kitlite.rom
	cp $n/thrive.html $@/doc
	cp $n/tcl.m4 $@/tclconfig
	cd $@ && autoconf

# python

thrive-py:
	rm -rf $@ && cp -r $l/python/. $@ && rm -rf $@/CVS
	cp $s/vlerq.py $n/words1.th $n/words2.th $@/.
	$u/includer.tcl $s/python.c >$@/thrive.c

# ruby

thrive-rb:
	rm -rf $@ && cp -r $l/ruby/. $@ && rm -rf $@/CVS
	cp $n/words1.th $n/words2.th $@/.
	$u/includer.tcl $s/ruby.c >$@/thrive.c

# lua

thrive-lua:
	rm -rf $@ && cp -r $l/lua/. $@ && rm -rf $@/CVS
	cp $n/words1.th $n/words2.th $@/.
	$u/includer.tcl $s/lua.c >$@/thrive.c

# ratcl

ratcl: ratcl$(dll)

ratcl$(dll): thrive$(dll) $n/ratcl.kit
	cp thrive$(dll) $@ && strip $(stx) $@ && cat $n/ratcl.kit >>$@

# loadable extension example
dynext.tde: $s/dynext.c $n/t4ext.h
	$(CC) $(dyn) -O2 -I$n $W $s/dynext.c -s -o $@

# other dependencies

all-na: $n/gtest.db $n/mkblk.db $n/ratcl.html $n/ratcl.kit $n/t4ext.h \
	$n/thrive.html $n/vlerq.html $n/vq.kit $n/vqx.kit $n/words1.th \
	$n/words2.th $n/xpar.h $n/expr.db $n/sql.db $n/tcl.m4 
wipe-n:
	rm -rf $n/*.*

$n/ratcl.kit: $s/rainit.tcl $s/rasql.tcl $s/ratcl.tcl $n/expr.db $n/sql.db \
	      $n/words1.th $n/words2.th $n/ratcl.html $s/thrill.tcl \
	      $n/thrive.html $n/vlerq.html $s/wrap.tcl
	mkdir -p ratcl.vfs/html
	$u/includer.tcl $s/rainit.tcl >rainit.tmp
	$u/makerom.tcl rainit.tmp ratcl.rom
	cp $n/ratcl.html $n/thrive.html $n/vlerq.html ratcl.vfs/html
	cp $s/ratcl.tcl $s/rasql.tcl ratcl.vfs/
	cp $n/expr.db $n/sql.db $n/words2.th ratcl.vfs/
	sdx wrap $@ -runtime ratcl.rom
	#$s/wrap.tcl ratcl.vfs ratcl.rom $@

$n/words1.th: $s/words.th
	$u/stripth.tcl CORE STARTUP <$s/words.th >$@
$n/words2.th: $s/words.th
	$u/stripth.tcl VECSTR END <$s/words.th >$@

$n/t4ext.h: $s/thrive.h
	$u/exthdr.tcl <$s/thrive.h >$@
$n/xpar.h: $s/xpar.re2c
	re2c -i -s -o $@ $s/xpar.re2c

$n/vq.kit: $s/boot.th $n/words1.th $n/words2.th
	$u/makerom.tcl $n/words1.th vq.rom
	mkdir -p vq.vfs
	cp $s/boot.th $n/words2.th vq.vfs/
	sdx wrap $@ -runtime vq.rom
$n/vqx.kit: $n/vq.kit $s/vqx.th $s/vqx.txt
	mkdir -p vqx.vfs
	cp $s/vqx.th vqx.vfs/main.th
	cp $s/vqx.txt vqx.vfs/
	sdx wrap vqx.kit -runtime $n/vq.kit
	sdx mkpack vqx.kit $@

$n/expr.db: $s/expr.tac
	cp $s/expr.tac .
	$u/taccle.tcl -d -p zz expr.tac
	$u/regram.tcl expr.tcl
	cp expr.db $@
$n/sql.db: $s/sql.tac
	cp $s/sql.tac .
	$u/taccle.tcl -d -p zz sql.tac
	$u/regram.tcl sql.tcl
	cp sql.db $@

$n/ratcl.html: $s/ratcl.dg
	$u/docgen.tcl $s/ratcl.dg >$@
$n/thrive.html: $s/thrive.dg
	$u/docgen.tcl $s/thrive.dg >$@
$n/vlerq.html: $s/vlerq.dg
	$u/docgen.tcl $s/vlerq.dg >$@

$n/gtest.db:
	cd $n && $u/gfill.tcl
$n/mkblk.db:
	cd $n && $u/mkblocked.tcl

$n/tcl.m4:
	wget -N -nv -O $@ \
	  http://cvs.sourceforge.net/viewcvs.py/*checkout*/tcl/tclconfig/tcl.m4

# vim: set ft=make :
