#!/usr/bin/tclsh
# z25thrill.test -=- test suite for some thrill constructs
# %renumber<^test >%

set uses {thrill ratcl}
source [file join [file dirname [info script]] initests.tcl]

test 0 {vq structure} vq {
  thrill::vcall { mkfopen ^describe } S vq$exeSuff
} {\
 -view
  +-dirs:V
    +-name:S
    +-parent:I
    +-files:V
      +-name:S
      +-size:I
      +-date:I
      +-contents:B}

test 1 {print inside vcall} -body {
  thrill::vcall {
    'abc .p Wn
  }
} -output {abc}

# messy limitation: vscript cannot do .p's etc, and vcall cannot do :, var, etc
proc defrun {args} {
  foreach {x y} $args {
    uplevel 1 [list thrill::vscript $x]
    append y " Wn"
    uplevel 1 [list thrill::vcall $y]
  }
}

test 2 {simple definition} -body {
  defrun {
    : multiply #ii-i * ;
  } {
    2 3 multiply .p
  }
} -output 6

test 3 {currying} -body {
  defrun {
    : times #ii-i * ;
  } {
    sp '2x3= .p 2 3 times .p nl
  } {
    variable times2
  } {
    { 2 times } to times2
    sp '5x2= .p 5 times2 exec .p nl
  } {
    { 3 times } constant times3
  } {
    sp '6x3= .p 6 times3 .p nl
  } {
    : times6 2 times3 times ;
  } {
    sp '7x6= .p 7 times6 .p nl
  } {
    variable n  8 to n
    : timesn n times ;
    : times8 [[ n , ]] times ;
    9 to n
  } {
    sp '2x8= .p 2 times8 .p nl
    sp '2x9= .p 2 timesn .p nl

    11 times2 0 b!
    sp '3x11= .p 3 times2 exec .p nl
    sp lit + times2 1 b!
    '3+11= .p 3 times2 exec .p nl
  }
} -output {\
 2x3=6
 5x2=10
 6x3=18
 7x6=42
 2x8=16
 2x9=18
 3x11=33
 3+11=14
}

test 4 {callback} -body {
  thrill::vcall { "puts -nonewline hi!" 'S heval }
} -output {hi!}

test 5 {MD5 implementation} -body {
  defrun [thrill::readfile ../src/md5.th] {} {
    : i2x2 #i-s 0x100 or i2x
	o( 3 box c@ Wo 0 box c! Wo 4 box c@ Wo 1 box c! 2 Wo tlen! Wo )o ;
    : md5str #-s md5result ' swap { @ i2x2 b2o scat } rep* ;
    : .md5 #s- dup md5full md5str sp .p sp tlen .p nl ;
  } {
    ' .md5
    'a .md5
    'abc .md5
    "message digest" .md5
    'abcdefghijklmnopqrstuvwxyz .md5
    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789 .md5
    '1234567890 3 { drop dup scat } rep* .md5
    '\s\s\s\s\s 3 { drop dup dup dup dup scat scat scat scat } rep*
		4 { drop dup scat } rep* .md5
  }
} -output {\
 d41d8cd98f00b204e9800998ecf8427e 0
 0cc175b9c0f1b6a831c399e269772661 1
 900150983cd24fb0d6963f7d28e17f72 3
 f96b697d7cb7938d525a2f31aaf161d0 14
 c3fcd3d76192e4007dfb496cca67e13b 26
 d174ab98d277d9f5a5611c2c9f419d9f 62
 57edf4a22be3c955ac49da2e2107b67a 80
 f38898bb69bb02bccb9594dfe471c5c0 10000
}

test 6 {data stack is empty} {
  vfinish
} {}

cleanupTests

# vim: set ft=tcl :
