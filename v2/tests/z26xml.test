#!/usr/bin/tclsh
# z26xml.test -=- test suite for the xml parsing code
# %renumber<^test >%

set uses {thrill ratcl}
source [file join [file dirname [info script]] initests.tcl]

test 0 {thrive vm has been set up} {
  regexp {^::thrive_\d+$} $::thrill::v::ws
} 1

test 1 {set up} {
  thrill::vcall { xparser Wn } S \
    {<?xml ah?><a b='c'>d<e>f</e>g<h/>i</a>j<![CDATA[ha]]>k<l/>m} 
} {}

test 2 {get tokens in a loop} -body {
  thrill::vcall { begin xtoken sp dup b2i .p sp dup .p nl 0= until Wn }
} -output {\
 1 1
 259 ?xml ah?
 4 4
 1 1
 263 a
 263 b
 2 2
 262 'c'
 4 4
 258 d
 1 1
 263 e
 4 4
 258 f
 1 1
 3 3
 263 e
 4 4
 258 g
 1 1
 263 h
 3 3
 4 4
 258 i
 1 1
 3 3
 263 a
 4 4
 258 j
 257 <![CDATA[ha]]>
 258 k
 1 1
 263 l
 3 3
 4 4
 258 m
 0 0
}

test 3 {xml scanner} -body {
  set x {<?xml ah?><a b='c'>d<e>f</e>g<h/>i</a>j<![CDATA[ha]]>k<l/>m} 
  proc xcb {args} { puts " [linsert $args 0 got]" }
  thrill::xmlscan $x xcb 
} -output {\
 got < {}
 got ? {?xml ah?}
 got > {}
 got < {}
 got I a
 got I b
 got = {}
 got Q 'c'
 got > {}
 got T d
 got < {}
 got I e
 got > {}
 got T f
 got < {}
 got / {}
 got I e
 got > {}
 got T g
 got < {}
 got I h
 got / {}
 got > {}
 got T i
 got < {}
 got / {}
 got I a
 got > {}
 got T j
 got D {<![CDATA[ha]]>}
 got T k
 got < {}
 got I l
 got / {}
 got > {}
 got T m
 got {} {}
}

test 4 {data stack is empty} {
  vfinish
} {}

cleanupTests

# vim: set ft=tcl :
