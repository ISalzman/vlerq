#!/usr/bin/tclsh
# z09parser.test -=- test suite for the ratcl parser
# %renumber<^test >%

set uses {thrill ratcl}
source [file join [file dirname [info script]] initests.tcl]

test 0 {setup test data} {
  set R [vdef A B C   {a b c d a f c b d}]
  set S [vdef D E F   {b g a d a f}]
  set T [vdef A B C D {a b c d a b e f b c e f e d c d e d e f a b d e}]
  set U [vdef C D E   {c d e c d f d e f}]
  set V [vdef C D     {c d e f}]
  set W [vdef A B C   {1 2 3 a b c}]
  set X [vdef D E:I F {a 100 aa b 20 bb c 3 cc}]
  set Y [vdef D       {y}]
  set Z [vdef E       {}]
  return
} {}

test 1 {parse int} {
  ::thrill::exparse 123
} {123}

test 2 {parse string} {
  ::thrill::exparse {"abc"}
} {"abc"}

test 3 {parse expression} {
  ::thrill::exparse {2 + 3 * 4}
} {10 2 {12 3 4}}

test 4 {parse simple var} {
  ::thrill::exparse {$abc}
} {1 {$abc}}

test 5 {parse array var} {
  ::thrill::exparse {$abc(def)}
} {1 {$abc(def)}}

test 6 {parse numeric array var} {
  ::thrill::exparse {$abc(123)}
} {1 {$abc(123)}}

test 7 {parse typed simple var} {
  ::thrill::exparse {$abc:I}
} {1 {$abc:I}}

test 8 {parse typed array var} {
  ::thrill::exparse {$abc(def):I}
} {1 {$abc(def):I}}

test 9 {constant int} {
  view $V calc X:I 123 | dump
} { \
  X  
  ---
  123
  123}

test 10 {calculated int} {
  view $V calc X:I {200+30+4} | dump
} { \
  X  
  ---
  234
  234}

test 11 {constant string} {
  view $V calc X {"abc"} | dump
} { \
  X  
  ---
  abc
  abc}

test 12 {field reference} {
  view $V calc X D | dump
} { \
  X
  -
  d
  f}

test 13 {field expression} {
  view $X calc X:I {2 * E} | get
} {200 40 6}

test 14 {field comparison} {
  view $X calc X:I {E <= 50} | get
} {0 1 1}

test 15 {field map} {
  view $X ifmap {E <= 50}
} {1 2}

test 16 {string variable access} {
  set n abc
  view $X calc X {$n} | get
} {abc abc abc}

test 17 {int variable access} {
  set n 123
  view $X calc X:I {$n:I} | get
} {123 123 123}

test 18 {variable access in an expression} {
  set n 2
  view $X calc X:I {$n:I * E} | get
} {200 40 6}

test 19 {array element access} {
  set a(n) 3
  view $X calc X:I {$a(n):I * E} | get
} {300 60 9}

test 20 {extend var expansion} {
  set n 123
  view [vdef oldcol:I {1 2 3}] extend newcol:I { oldcol * $n:I } | get
} {1 123 2 246 3 369}

test 21 {where var expansion} {
  set n 2
  view [vdef oldcol:I {1 2 3}] where { oldcol == $n:I } | get
} 2

test 22 {single "_" value} {
  set v [vdef a {1 2 3}]
  view $v extend b {"_"} | get
} {1 _ 2 _ 3 _}

test 23 {single "-" value, T#17} {
  set v [vdef a {1 2 3}]
  view $v extend b {"-"} | get
} {1 - 2 - 3 -}

test 24 {single "haha" value, T#17} {
  set v [vdef a {1 2 3}]
  view $v extend b {"haha"} | get
} {1 haha 2 haha 3 haha}

test 25 {string columns} {
    view [vdef A B C {a b c d e f g h i}] ifmap {A == "a"}
} 0

test 26 {string columns containing numbers} {
    view [vdef A B C {1 2 3 4 5 6 7 8 9}] ifmap {A == "1"}
} 0

test 27 {string columns} {
    view [vdef A B C {a b c d e f g h i}] where {A == "a"} | get
} {a b c}

test 28 {string columns containing numbers} {
    view [vdef A B C {1 2 3 4 5 6 7 8 9}] where {A == "1"} | get
} {1 2 3}

test 29 {variable in where should remain unmodified #30} {
  set n 3
  view [vdef a {1 2 3 4 5}] where {a==$n}
  set n
} 3

test 30 {tricky quotation} {
  ::thrill::exparse {"a\"b"}
} {"a\"b"}

test 31 {tricky quotation} {
  view [vdef 2] calc B {"a\"b"} | get
} {{a\"b} {a\"b}}

test 32 {data stack is empty} {
  vfinish
} {}

cleanupTests

# vim: set ft=tcl :
