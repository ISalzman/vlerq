#!/usr/bin/tclsh
# z05vops.test -=- test suite for the simple ratcl view operators
# %renumber<^test >%

set uses {thrill ratcl}
source [file join [file dirname [info script]] initests.tcl]

test 0 {setup test data} {
  set R [vdef A B C   {a b c d a f c b d}]
  set S [vdef D E F   {b g a d a f}]
  set T [vdef A B C D {a b c d a b e f b c e f e d c d e d e f a b d e}]
  set U [vdef C D E   {c d e c d f d e f}]
  set V [vdef C D     {c d e f}]
  set W [vdef A B C   {1 2 3 a b c}]
  set X [vdef D E:I F {a 100 aa b 20 bb c 3 cc}]
  set Y [vdef D       {y}]
  set Z [vdef E       {}]
  return
} {}

test 1 {pass type} {
  view $W pass | type
} pass

test 2 {pass count} {
  view $W pass | get #
} 2

test 3 {pass width} {
  view $W pass | info width
} 3

test 4 {pass names} {
  view $W pass | info names
} {A B C}

test 5 {pass types} {
  view $W pass | info types
} {S S S}

test 6 {pass data} {
  view $W pass | get
} {1 2 3 a b c}

test 7 {clone view} {
  set v [view $R clone] 
  list [view $v info names] [view $v info types] [view $v get]
} {{A B C} {S S S} {}}

test 8 {repeat} {
  view $V repeat 3 | get
} {c d e f c d e f c d e f}

test 9 {spread} {
  view $V spread 3 | get
} {c d c d c d e f e f e f}

test 10 {concat} {
  set v [view $R concat $W]
  list [view $v info names] [view $v info types] [view $v get]
} {{A B C} {S S S} {a b c d a f c b d 1 2 3 a b c}}

test 11 {concat different columns} -body {
  view $R concat $S
} -returnCodes {1} -result {not same columns}

test 12 {concat more columns} -body {
  view $R concat $T
} -returnCodes {1} -result {not same columns}

test 13 {pair} {
  set v [view $W pair $X] 
  list [view $v info names] [view $v info types] [view $v get]
} {{A B C D E F} {S S S S I S} {1 2 3 a 100 aa a b c b 20 bb}}

test 14 {product} {
  set v [view $W product $S] 
  list [view $v info names] [view $v info types] [view $v get]
} {{A B C D E F} {S S S S S S}\
	{1 2 3 b g a 1 2 3 d a f a b c b g a a b c d a f}}

test 15 {product with one row} {
  set v [view $W product $Y] 
  list [view $v info names] [view $v info types] [view $v get]
} {{A B C D} {S S S S} {1 2 3 y a b c y}}

test 16 {product with no rows} {
  set v [view $W product $Z] 
  list [view $v info names] [view $v info types] [view $v get]
} {{A B C E} {S S S S} {}}

test 17 {product type} {
  view $W product $S | type
} product

test 18 {project reorder by name} {
  set v [view $T project C A B] 
  list [view $v info names] [view $v info types] [view $v get]
} {{C A B} {S S S} {c a b e a b e b c c e d e e d d a b}}

test 19 {project reorder by position} {
  set v [view $T project 2 0 1] 
  list [view $v info names] [view $v info types] [view $v get]
} {{C A B} {S S S} {c a b e a b e b c c e d e e d d a b}}

test 20 {project reduce} {
  set v [view $T project A B] 
  list [view $v info names] [view $v info types] [view $v get]
} {{A B} {S S} {a b b c e d}}

test 21 {omit} {
  set v [view $T project -omit C D] 
  list [view $v info names] [view $v info types] [view $v get]
} {{A B} {S S} {a b b c e d}}

test 22 {omit reorder} {
  set v [view $T project -omit D C] 
  list [view $v info names] [view $v info types] [view $v get]
} {{A B} {S S} {a b b c e d}}

test 23 {noop type} {
  view $W project | type
} maprow

test 24 {noop omit type} {
  view $W project -omit | type
} maprow

test 25 {maprow} {
  set v [view $T maprow {2 1 0 4 5}] 
  list [view $v info names] [view $v info types] [view $v get]
} {{A B C D} {S S S S} {b c e f a b e f a b c d e d e f a b d e}}

test 26 {mapcols} {
  set v [view $T mapcols 0 1] 
  list [view $v info names] [view $v info types] [view $v get]
} {{A B} {S S} {a b a b b c e d e d a b}}

test 27 {columns by name} {
  set v [view $T mapcols A B] 
  list [view $v info names] [view $v info types] [view $v get]
} {{A B} {S S} {a b a b b c e d e d a b}}

test 28 {columns by position} {
  set v [view $T mapcols 0 1] 
  list [view $v info names] [view $v info types] [view $v get]
} {{A B} {S S} {a b a b b c e d e d a b}}

test 29 {columns unique} {
  set v [view $T mapcols 0 1 | unique] 
  list [view $v info names] [view $v info types] [view $v get]
} {{A B} {S S} {a b b c e d}}

test 30 {omit} {
  set v [view $T mapcols -omit 2 3] 
  list [view $v info names] [view $v info types] [view $v get]
} {{A B} {S S} {a b a b b c e d e d a b}}

test 31 {omit reorder} {
  set v [view $T mapcols -omit 3 2] 
  list [view $v info names] [view $v info types] [view $v get]
} {{A B} {S S} {a b a b b c e d e d a b}}

test 32 {noop type} {
  view $W mapcols | type
} row

test 33 {noop omit type} {
  view $W mapcols -omit | type
} row

test 34 {slice} {
  view $R slice 1 2 1 | get
} {d a f c b d}

test 35 {slice} {
  view $R slice 2 2 -1 | get
} {c b d d a f}

test 36 {slice} {
  view $R slice 0 2 2 | get
} {a b c c b d}

test 37 {slice} {
  view $R slice 1 3 0 | get
} {d a f d a f d a f}

test 38 {slice} {
  view $R slice 1 0 1 | get
} {}

test 39 {reverse} {
  set v [view $R reverse] 
  list [view $v info names] [view $v info types] [view $v get]
} {{A B C} {S S S} {c b d d a f a b c}}

test 40 {reverse type} {
  view $W reverse | type
} reverse

test 41 {first} {
  view $R first 2 | get
} {a b c d a f}

test 42 {first truncated} {
  view $R first 4 | get
} {a b c d a f c b d}

test 43 {last} {
  view $R last 2 | get
} {d a f c b d}

test 44 {last truncated} {
  view $R last 4 | get
} {a b c d a f c b d}

test 45 {take none} {
  view $R take 0 | get
} {}

test 46 {take one} {
  view $R take 1 | get
} {a b c}

test 47 {take two} {
  view $R take 2 | get
} {a b c d a f}

test 48 {take more} {
  view $R take 4 | get
} {a b c d a f c b d a b c}

test 49 {take last} {
  view $R take -1 | get
} {c b d}

test 50 {take more than last} {
  view $R take -4 | get
} {c b d d a f a b c c b d}

test 51 {tag} {
  set v [view $R tag N]
  list [view $v info names] [view $v info types] [view $v get]
} {{A B C N} {S S S I} {a b c 0 d a f 1 c b d 2}}

test 52 {delete rows} {
  view $T delete 2 3 | get
} {a b c d a b e f a b d e}

test 53 {mapcols by name} {
  view $R mapcols B | get
} {b a b}

test 54 {mapcols by position} {
  view $R mapcols 1 | get
} {b a b}

test 55 {mapcols by position from end} {
  view $R mapcols -2 | get
} {b a b}

test 56 {rename} {
  view $R rename B X | dump
} { \
  A  X  C
  -  -  -
  a  b  c
  d  a  f
  c  b  d}

test 57 {rename} {
  view $R rename B X -1 Y | dump
} { \
  A  X  Y
  -  -  -
  a  b  c
  d  a  f
  c  b  d}

test 58 {as} {
  view $R as view-R
  list [view-R info names] [view-R info types] [view-R get]
} {{A B C} {S S S} {a b c d a f c b d}}

test 59 {as view access} {
  set v [view-R]
  list [view $v info names] [view $v info types] [view $v get]
} {{A B C} {S S S} {a b c d a f c b d}}

test 60 {as pass through} {
  view $S as view-S | get
} {b g a d a f}

test 61 {as when orig is gone} {
  unset S
  view-S get
} {b g a d a f}

test 62 {as from different ns} {
  namespace eval dummy {
    view-S get
  }
} {b g a d a f}

test 63 {orig when as is cleaned up} {
  rename view-R ""
  view $R get
} {a b c d a f c b d}

test 64 {as renamed} {
  rename view-S view-S2
  view-S2 get
} {b g a d a f}

test 65 {as renamed to another ns} {
  rename view-S2 dummy::view-S3
  dummy::view-S3 get
} {b g a d a f}

test 66 {data stack is empty} {
  vfinish
} {}

cleanupTests

# vim: set ft=tcl :
