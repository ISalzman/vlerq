#!/usr/bin/env tclkit
# go -- Various build and test operations.
# jcw, 2007-03-28

cd [file dirname [info script]]

#set linuxvm ~/Parallels/puppie/lin26.pvs
#set linuxip 10.0.1.61
set linuxvm ~/Parallels/debbie/debbie.pvs
set linuxip 10.0.1.64

namespace eval go {}
    
proc go::help {} {
    puts "
  go ?status?           show some status info
  go help               this text
  go linux ?-stop?      start or stop the Linux VM
  go release            build win/mac/lin release binaries (needs linux vm)
  go test ?name?        run the core test suite
  go wrap               update the ratcl starkit
"
}

proc go::status {} {
    puts "No status."
}

proc go::linux {{mode ""}} {
    if {$mode ne "-stop"} {
        puts "Launching Linux VM"
        exec open [file normalize $::linuxvm]
        # wait for VM to be reachable
        for {set i 0} {$i < 100} {incr i} {
            after 50
            if {![catch { close [socket $::linuxip 22] }]} { break }
        }
    } else {
        # actually, this quits *a* VM, not necessarily the right one! :(
        puts "Suspending Linux VM"
        exec osascript -e {tell application "Parallels Desktop" to quit}
    }
}

proc go::release {} {    
    cd core
    set out [exec make release] 
    cd ..
    
    if {[regexp -all {Failed\s+0} $out] != 3} {
        puts stderr $out
        exit 1
    }
    
    exec grep all.tcl: <<$out >@stdout
}

proc go::test {{name ""}} {
    cd core
    if {$name ne ""} {
        exec make
        exec [info nameofexe] tests/$name.test -v pe >@stdout
    } else {
        set out [exec make test]

        if {[regexp -all {Failed\s+0} $out] != 1} {
            puts stderr $out
            exit 1
        }

        puts [regsub {.*Tests ended at.*(all.tcl:\s)} $out {\1}]
    }
    cd ..
}

proc go::wrap {} {
    cd core
    exec make rat
    cd ..

    # Don't check in libvlerq4.dll/dylib if it hasn't changed - even though
    # the compile probably changed a timestamp in there.  Do this by looking at
    # libvlerq4.so - if that hasn't changed, then revert libvlerq4.dll as well.
    
    set out [exec svn st ratcl/lib/vlerq4/]
    if {![regexp libvlerq4.so $out] && [regexp libvlerq4.dll $out]} {
        exec svn revert ratcl/lib/vlerq4/libvlerq4.dll
    }
    if {![regexp libvlerq4.so $out] && [regexp libvlerq4.dylib $out]} {
        exec svn revert ratcl/lib/vlerq4/libvlerq4.dylib
    }
    
    #eval exec ls -l [glob ratcl/lib/vlerq4/libvlerq4.*] >@stdout
    
    puts "sdx: [exec sdx wrap ratcl.kit -vfs ratcl]"
}

# now process the command line to call one of the go::* procs
namespace eval go {
    set cmd [lindex $argv 0]
    if {[info commands ::go::$cmd] ne ""} {
        eval $argv
    } elseif {$cmd eq ""} {
        status
    } else {
        set cmdlist {}
        foreach knowncmd [lsort [info commands ::go::*]] {
            lappend cmdlist [namespace tail $knowncmd]
        }
        puts "'$cmd' not found, should be one of: [join $cmdlist {, }]"
        exit 1
    }
}
