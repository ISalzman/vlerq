# V9 performance, normally skipped as it generates output i.s.o running checks
# 2009-05-08 <jcw@equi4.com> http://opensource.org/licenses/mit-license.php
# $Id$
# %renumber<^\s*perf >%

# these "tests" were adapted from basic.test, some with similar timings removed
# does not really act like a test suite: there is no verification, just output

source [file join [file dirname [info script]] setup.tcl] ;# to find extension

package require V9x

proc perf {id script {num 1000}} {
    set t [lindex [uplevel time [list $script] $num] 0]
    puts [format "%4d: %6d ns/op %6d Kops/s" \
            $id [expr {round(1000 * $t)}] [expr {round(1000 / $t)}]]
}

set X {
    set V {vdat A:I,B:I {1 11 111} {2 22 222}}
    set M name:S,type:I,subv:V
    set L {1 a 12 ab 123 abc 1234 abcd 12345 abcde}
    array set A $L

    perf 0  { lindex $L 4       }
    perf 1  { dict get $L 123   }
    perf 2  { set A(123)        }

    perf 3  { v9 size 123       }
    perf 4  { v9 size $V        }
                             
    perf 5  { v9 meta 123       }
    perf 6  { v9 meta $V        }
                              
    perf 7  { v9 at A:I,B:I 0 0 }                             
    perf 8  { v9 at $V 0 0      }
    perf 9  { v9 at $M 0 0      }
                             
    perf 10 { v9 names 123      }
    perf 11 { v9 names $V       }
                             
    perf 12 { v9 types 123      }
    perf 13 { v9 types $V       }
                             
    perf 14 { v9 width 123      }
    perf 15 { v9 width $V       }
                             
    perf 16 { v9 get $V * 0     }
    perf 17 { v9 get $V 0 *     }
    perf 18 { v9 get $V #       }
    perf 19 { v9 get $V @       }
    perf 20 { v9 get $V @ #     }
        
    perf 21 { v9 get $M @ 0 *   }
}

puts Direct:
eval $X

puts Compiled:
proc X {} $X
X
                                  
unset A L M V X
rename X ""
