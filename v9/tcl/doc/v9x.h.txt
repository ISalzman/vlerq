/ViewDeps/
    Structure used to manage dependencies to (data and trigger) sources and from
    (data and trigger) drains.
    . argv      Tcl list object with the name and arguments
    . deps      number of dependencies currently registered in drains[]
    . limit     number of entries available in drains[]
    . sources   number of source dependencies
    . drains    non-refcounted pointers to all drains registered here

/ViewHandler/
    Definition of a view handler which can convert a Tcl list to a view.
    . name      the name of the handler
    . args      definition of argument types
    . proc      the C function to perform the conversion

/ViewOperator/
    A view operator takes a view and optional arguments to do something with it.
    . name      the name of the operator
    . types     definition of return and argument types
    . proc      the C function to perform the operation

/Storage/

# /DescAsMeta/
#   Take a meta-view string description and convert it into a meta-view.
#   :           resulting meta-view
#   = ip        Tcl interpreter
#   < s         the description string to convert to a meta-view
    
/ObjAsView/
    Take an arbitrary object and try to convert it to a view.
    If conversion fails, an error message is left in the Tcl interpreter.
    :           corresponding view, or null if conversion failed
    = ip        Tcl interpreter
    < obj       input object
    
/ObjAsItem/
    Convert a Tcl object to an item of the specified type.
    :           1 if conversion succeeded, 0 if it failed
    = ip        Tcl interpreter
    < obj       input object
    < type      type to which the object should be converted
    > pitem     pointer to an item which will contain the converted result
    
/ItemAsObj/
    Convert an item of the specified type to a new Tcl object.
    :           the converted Tcl object result, if conversion failed
    = ip        Tcl interpreter
    < type      type to which the object should be converted
    < item      the item to be converted

/UnwindSubviews/
    Unwind "at" levels until the inner vref is reached.
    :           return the internal storage object, or null if unwinding failed
    = ip        Tcl interpreter
    < obj       input object
    > buf       used to return optional subview indices

/HandlerTable/
    Table of all known view handlers.

/OperatorTable/
    Table of all known view operators.

# /StorageCmd/
#   This Tcl command proc is used to implement storage objects.
#   A Tcl command will be defined for each storage, with the clientdata used as
#   storage pointer to an internal data structure.
#   :           TCL_OK if command was successfully executed, TCL_ERROR otherwise
#   = cd        storage pointer
#   = ip        Tcl interpreter
#   < oc        number of command arguments, including command itself
#   < ov        argument vector

/CreateStorage/
    Create a new storage command object along with its internal storage pointer.
    :           storage as vref Tcl_Obj
    = ip        Tcl interpreter
    < v         the view to be associated initially with the storage
    < cmd       the name of the object command to be created

/GetStorageInfo/
    Return the internal storage pointer associated with a storage object cmd.
    :           storage pointer, or null if there is no such storage
    = ip        Tcl interpreter
    < cname     name of the storage object command

/GetViewFromStorage/
    Return the view currently associated with the storage.
    :           associated view
    < sp        internal storage pointer

/ModifyStorage/
    Make a permanent change to a storage object.
    = sp        internal storage pointer
    < ivec      vector of integer arguments and "at" indices
    < item      new value
    < op        0 = atset, 1 = replace
