/UNUSED/
    Mark unused argmuments so they won't generate a compiler warning.

/Vector/
    Opaque pointer to a vector, which is preceded by VectorHead.

/VectorAlloc/
    The dispatch table used to define how vectors are allocated and free'd.
    . name      name of allocation type, should be used for debugging only
    . release   the function to call just before a vector is released
    . address   the function which returns the address of the vector contents

/VectorType/
    The dispatch table used to define how the bytes in a vector are interpreted.
    . name      name of the vector type, should be used for debugging only
    . itembytes number of bytes used per item, or < 0 if items aren't byte-sized
    . cleaner   the function to call to release the memory used by this vector
    . getter    the main accessor function, fetches one item of data
    . setter    the main modifying functions, stores one item of data
    . replacer  the function used to shift contents around for inserts/deletes
    . duplicator the function used to create a shallow copy of this vector

/VectorHead/
    These fields are placed right in front of each vector and view.
    The Head() macro is the normal way to access and change these fields.
    . alloc     return the allocation dispatch table
    . type      return the type/getter dispatch table
    . count     the number of entries in this vector, or rows it it's a view
    . shares    reference count: < 0 is unused, 0 is one owner, > 0 is shared

/ViewVector/
    A view is a vector with a specific structure, with pointers to the columns
    that represent the actual data inside the view.
    . meta      incref'd pointer to the meta-view structure description
    . col       array of incref'd pointers to each column, as well as a colnum

/VAF_READONLY/
    This is a read-only vector, i.e. none of the other flags are set.

/VAF_MUTABLE/
    This is a modifiable vector.

/VAF_RESIZEABLE/
    This vector can be re-allocated to make it another size.

/Head/
    Convenience for accessign the header fields of a vector or view.
    :           struct of type VectorHead
    < p         pointer to the vector or view

/IsShared/
    Return 1 if the vector or view is being referenced from more than one place.
    :           1 if shared, 0 if currently unshared / owned by a single parent
    < p         pointer to the vector or view
    
/Address/
    Return the base address of the contents of a vector.
    :           char pointer
    < p         pointer to the vector or view

/Overflow/
    An overflow block, used to store data once it exceeds the fixed buffer size.

/Buffer/
    Buffers are used to efficiently collect bytes as they are generated, the
    result can be turned into a contiguously allocated memory area once done.
    . fill      
    . limit     
    . head      
    . saved     
    . used      
    . ofill     
    . result    
    . buf       
    . slack     

/ADD_ONEC_TO_BUF/
    Append a single character to a buffer without checking for overflow.
    Can only be used when the number of characters in the buffer is very small.
    = b         buffer pointer
    = x         the character to append

/ADD_CHAR_TO_BUF/
    Append a single character to a buffer, expanding it as needed.
    = b         buffer pointer
    = x         the character to append

/ADD_INT_TO_BUF/
    Append a single integer to a buffer, expanding it as needed.
    = b         buffer pointer
    = x         the integer to append

/ADD_PTR_TO_BUF/
    Append a single pointer to a buffer, expanding it as needed.
    = b         buffer pointer
    = x         the pointer to append

/BufferCount/
    Return the current number of bytes stored in the buffer.
    :           integer count
    = b         buffer pointer

/IncRef/
    Increment the reference count of a vector.
    :           the input pointer
    = vp        pointer to vector
    
/DecRef/
    Decrement the reference count of a vector.
    Clean-up and release the vector when the shared count becomes negative.
    :           the input pointer, or null if the vector was deleted.
    = vp        pointer to vector, no-op if null

/NewInlineVector/
    Allocate a new vector which has space for its data inline.
    :           newly constructed vector
    < length    number of bytes to allocate for the data
    
# /NewFixedVector/
#   Allocate a new vector which points to some external data bytes.
#   The data must stay the same and be available as long as this vector exists.
#   :           newly constructed vector
#   < ptr       pointer to the existing data
#   < length    size of the existing data

# /NewDynamicVector/
#   Allocate a new vector with a resizable data area.
#   :           newly constructed vector, initialized with an empty data area.

/NewMappedVector/
    Allocate a new vector which maps a file read-only into memory.
    The contents of the file shoudl not change as long as this vector exists.
    :           newly constructed vector
    < fd        file descriptor of the open file

/NewSharedVector/
    Allocate a new vector which re-uses data bytes from another vector.
    :           newly constructed vector
    < vp        pointer to the parent vector which this one will overlap
    < offset    starting offset of the data area in the parent vector
    < length    size of the data area

/InitBuffer/
    Initialize a buffer so it can be used to collect data bytes.
    = bp        buffer pointer

/ReleaseBuffer/
    Clean up buffer, which can no longer be used after this.
    Will free any allocated result memory block if keep is false.
    = bp        buffer pointer
    < keep      if != 0 don't release result, else free all mem including result
    
/AddToBuffer/
    Append the specified data bytes to the buffer.
    = bp        buffer pointer
    < data      data bytes to append
    < len       number of bytes to append
    
/NextFromBuffer/
    This function can be used to extract all collected data from a buffer,
    without having to allocate a memory block to hold all data at once.
    Each call will return a pointer to some data and set the number of bytes
    available at that pointer address.
    Each calls returns 1 while there is more data, or 0 once done.
    This function can not be called again to extract the same data twice.
    On the first call, *firstp should be null on entry.
    = bp        buffer pointer
    > firstp    pointer to the data which can be extracted
    > pcount    number of bytes available at *firstp
    
/BufferAsPtr/
    Use this to collect all data in the buffer into a contiguous memory area.
    :           pointer to the contiguous memory area
    = bp        buffer pointer
    < fast      if set, then allocation can be avoided for small amounts of data

/PickIntGetter/
    Return a type dispatch pointer to be used as "type" member in vectors.
    The dispatch table treats items as packed in the specified number of bits.
    :           type dispatch pointer
    < bits      integer bit width, only values 0/1/2/4/8/16/32/64 are allowed

/FixedGetter/
    More general version of PickIntGetter which can also return dispatch tables
    that deal with floating point values and reverse-endian access.
    :           type dispatch pointer
    < bytes     total number of bytes in the vector
    < rows      total number of rows stored in the vector
    < real      if true, the vector contains reals, else integers
    < flip      if true, interpret the vector as having reversed endian-ness
    
/NewDataVec/
    Allocate a new modifable inline vector which can contain items of the 
    specified type.
    :           newly constructed vector
    < type      type of items this vector can contain
    < rows      number of rows this vector can contain

/DataViewReplacer/
    Replace rows in a data view, also used for insertions and deletions.
    = v         view to be changed
    < off       offset of first row to replace
    < del       number of rows to delete
    < vnew      new rows, can be null if none

/EmptyMeta/
    Return the meta-view which has zero rows.
    :           view pointer
