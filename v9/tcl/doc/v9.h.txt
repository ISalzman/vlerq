/V9View/
    Opaque pointer type for all views, which are reference-counted.
    
/V9_TYPEMAP/
    The character codes used to represent each type, order must match V9Types.
                
/V9Types/
    Constants for each of the types which can be stored in a V9Item.
    
/V9Item/
    Data structure to pass around data of which the type can vary at run-time.

/V9_ViewEmit/
    Convert a view and all its subviews into a Metakit-compatible dataset, for
    in-memory or disk-based use.
    :           total number of bytes emitted
    < view      input view
    = aux       pointer passed to fini, can contain arbitrary data
    < fini      initialization function to call
    < fdat      data bytes emit function to call
    
/V9_EmitView/
    Turn a view into a series of bytes - this is biary data.
    :           a buffer with the new data, must be free'd by the caller
    < v         input view
    > plen      pointer to int set to the total number of data bytes

/V9_Get/
    Fetch the item in a view at the given row and column positions.
    If the item is a missing value, return a default value instead.
    If pdef is null, return a fixed value (0 for numbers, "" for strings, etc).
    :           the fetched item
    < v         the view from which to fetch the item
    < row       the row number of the item to fetch (end-relative if < 0)
    < col       the column number of the item to fetch (end-relative if < 0)
    < pdef      a pointer to the default, or null for a fixed default

/V9_MapDataAsView/
    Take a series of data bytes, as generated by V9_EmitView() or Metakit, and
    convert it to a view structure.
    :           the resulting view
    < ptr       pointer to input data bytes
    < len       number of input data bytes

/V9_Set/
    Store an item in a view at the given row and column positions.
    :           the modified view
    = v         the view in which to store the item
    < row       the row number of the item to fetch (end-relative if < 0)
    < col       the column number of the item to fetch (end-relative if < 0)
    < pitem     the item to store, or missing if null

/V9_Replace/
    Replace zero or more rows by zero or more rows.
    Can also be used to insert or delete rows.
    :           the modified view
    = v         the view in which to replace rows
    < offset    starting row position in view
    < count     number of rows to be replaced by new content
    < vnew      new contents view to replace the specified rows
    
/V9_AllocName/
    Return the allocation type of a view (inline, static, dynamic, etc)
    This is only for testing.
    :           type name as a char pointer
    < v         input view
    
/V9_TypeName/
    Return the access type of a view (I16, string, view, etc)
    This is only for testing.
    :           type name as a char pointer
    < v         input view
    
/V9_AddRef/
    Increment the view reference count by one.
    :           the input view
    = v         affected view, if null then use/return empty meta-view instead

/V9_Release/
    Decrement the view reference count by one.
    If the count drops below zero, the view is destroyed and its memory free'd.
    :           the input view - unless it has been deleted, then return null
    = v         affected view
    
/V9_Meta/
    Return the meta-view of a view, which describes its structure.
    :           the meta-view
    < v         input view

/V9_Size/
    Return the size of a view, i.e. the number of rows in the view.
    :           the row count
    < v         input view
    
/V9_GetInt/
    Convenience function to fetch an item which is known to be an integer.
    :           the fetched integer, or 0 if absent
    < v         the view from which to fetch the item
    < row       the row number of the item to fetch (end-relative if < 0)
    < col       the column number of the item to fetch (end-relative if < 0)

/V9_GetString/
    Convenience function to fetch an item which is known to be a text string.
    :           char pointer to the fetched string, or null if absent
    < v         the view from which to fetch the item
    < row       the row number of the item to fetch (end-relative if < 0)
    < col       the column number of the item to fetch (end-relative if < 0)

/V9_GetView/
    Convenience function to fetch an item which is known to be a sub-view.
    :           the fetched sub-view, or null if absent
    < v         the view from which to fetch the item
    < row       the row number of the item to fetch (end-relative if < 0)
    < col       the column number of the item to fetch (end-relative if < 0)

# /V9_Owner/
#   Look into a view to find out whether it is a child of another view.
#   If so, set the row and column arg points to its position in that view.
#   :           the parent view if there is one, else null
#   < v         input view
#   > prow      pointer to row position in parent view
#   > pcol      pointer to column position in parent view

/V9_NewDataView/
    Create a new view with the specified structure and number of rows.
    With 0 rows no columns are set up so other columns may be set up afterwards.
    :           the new view
    < meta      the structure of the new view
    < rows      the number of rows, sets up with modifiable columns if > 0
    
# /V9_SetMetaRow/
#   Shorthand to fill in the three items of one row in a meta-view.
#   < meta      the meta view to change
#   < row       the row where to store the items
#   < nam       column 0, column name
#   < typ       column 1, column type
#   < sub       column 2, colums subview, or null if not used
    
/V9_MetaAsDescLength/
    Use this to datermine how many bytes a meta-view description will take.
    To be used for allocating memory before calling V9_MetaAsDesc().
    :           number of bytes, not counting the final null byte
    < meta      the meta-view to create a description for
    
/V9_MetaAsDesc/
    Given a suitably-sized buffer, fill it with the description of a meta-view.
    :           pointer past the last byte added to the buffer
    < meta      the meta-view to create a description for
    = buf       buffer where the meta-view description is to be stored
