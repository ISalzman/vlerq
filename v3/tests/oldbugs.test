#!/usr/bin/env tclkit
# regression tests for old bugs

source [file join [file dir [info script]] initests.tcl]

# %renumber<^\s*test >%

test 0 {load ratcl} {
  package require ratcl
} 3

test 1 {view exists} -body {
  view
} -returnCodes error -result {wrong # args: should be "view v ... | ..."}

test 2 {bt bug 28-06-2006} {
  # led to 2 assertions because ungroup did not set up a valid meta view
  set v [view {w p} vdef {a 1 a 2 b 1}]
  set w [view w vdef {a b}]
  view $v join_i $w | group p s | size
} 2

test 3 {ungroup on subview with no columns} {
  list [view $v join $w J | struct_mk] [view $v join_i $w | struct_mk]
} {{w:S,p:S,J[]} w:S,p:S}
  
test 4 {ungroup structure on non-empty zero-width subview} {
  set v [view {w p} vdef {a 1}]
  set w [view w vdef a]
  set x [view $v join $w _J]
  list [vget $x 0 _J #] [view $x struct_mk]
} {1 {w:S,p:S,_J[]}}
  
test 5 {ungroup structure on non-empty subview} {
  set v [view {w p} vdef {a 1}]
  set w [view {w q} vdef {a 2}]
  set x [view $v join $w _J]
  list [vget $x 0 _J #] [view $x struct_mk]
} {1 {w:S,p:S,_J[q:S]}}
  
test 6 {ungroup structure on empty zero-width subview} {
  set v [view {w p} vdef {b 2}]
  set w [view w vdef a]
  set x [view $v join $w _J]
  list [vget $x 0 _J #] [view $x struct_mk]
} {0 {w:S,p:S,_J[]}}
  
test 7 {ungroup structure on empty subview} {
  set v [view {w p} vdef {b 2}]
  set w [view {w q} vdef {a 3}]
  set x [view $v join $w _J]
  list [vget $x 0 _J #] [view $x struct_mk]
} {0 {w:S,p:S,_J[q:S]}}
  
test 8 {bt html typo} {
  view {A B} vdef {a b} | group B G | html
} {<table><style type="text/css"><!--\
    table {border-spacing:0; border:1px solid #aaa; margin:0 0 2px 0}\
    th {background-color:#eee; font-weight:normal}\
    td {vertical-align:top} th,td {padding:0 2px}\
    th.row,td.row {color:#aaa; font-size:75%} --></style>
<tr><th class="row"></th><th>B</th><th>G</th></tr>
<tr><td align="right"\
        class="row">0</td><td>b</td><td><table><style type="text/css"><!--\
    table {border-spacing:0; border:1px solid #aaa; margin:0 0 2px 0}\
    th {background-color:#eee; font-weight:normal}\
    td {vertical-align:top} th,td {padding:0 2px}\
    th.row,td.row {color:#aaa; font-size:75%} --></style>
<tr><th class="row"></th><th>A</th></tr>
<tr><td align="right" class="row">0</td><td>a</td></tr>
</table>
</td></tr>
</table>
}

# reported by BT in email 2006-08-27, tests 9-16: Another join assertion failure

test 9 {join, ok} {
  view {T Q} vdef {1 2} | join [view {T R} vdef {3 4}] J | dump
} { \
  T  Q  J 
  -  -  --
  1  2  #0}

test 10 {zero row join, ok} {
  view {T Q} vdef {} | join [view {T R} vdef {3 4}] J | dump
} { \
  T  Q  J
  -  -  -}

test 11 {join, structure ok} {
  view {T Q} vdef {1 2} | join [view {T R} vdef {3 4}] J | struct_mk
} {T:S,Q:S,J[R:S]}

test 12 {zero row join, structure ok} {
  view {T Q} vdef {} | join [view {T R} vdef {3 4}] J | struct_mk
} {T:S,Q:S,J[R:S]}

test 13 {join, ungroup structure ok} {
  view {T Q} vdef {1 2} | join [view {T R} vdef {3 4}] J | ungroup J | struct_mk
} {T:S,Q:S,R:S}

test 14 {zero row join, ungroup structure wrong} {
  view {T Q} vdef {} | join [view {T R} vdef {3 4}] J | ungroup J | struct_mk
} {T:S,Q:S,R:S}

test 15 {zero row join, ungroup loses R column} {
  view {T Q} vdef {} | join [view {T R} vdef {3 4}] J | ungroup J | dump
} { \
  T  Q  R
  -  -  -}

test 16 {zero row join, join_i also loses R} {
  view {T Q} vdef {} | join_i [view {T R} vdef {3 4}] | dump
} { \
  T  Q  R
  -  -  -}

# reported by BT at http://www.vlerq.org/vqd/358, tests 17-20:

test 17 {from pivot code, this works} {
  view A vdef a | join [view {A B} vdef {a d}] G | struct_mk
} {A:S,G[B:S]}

test 18 {from pivot code, dump looks ok} {
  view A vdef a | join [view {A B} vdef {a d}] G | dump
} { \
  A  G 
  -  --
  a  #1}

test 19 {from pivot code, subview dump looks ok} {
  view A vdef a | join [view {A B} vdef {a d}] G | get 0 G | dump
} { \
  B
  -
  d}

test 20 {from pivot code, this asserts} {
  view A vdef a | join [view {A B} vdef {a d}] G | collect { $(G) }
} {{at {join {vdef A a} {vdef {A B} {a d}} G} 0 1}}

test 21 {freeze small number of zero's} {
  view A:I vdef {0 0 0 0 0} | freeze | get
} {0 0 0 0 0}

# reported by BT in 2006-08-28 email: get @ | dump assertion failure

test 22 {size of empty string view} {
  vget "" #
} 0
  
test 23 {dump meta view} {
  view A vdef 1 | get @ | dump
} { \
  name  type  subv
  ----  ----  ----
  A     S       #0}
  
::tcltest::cleanupTests
