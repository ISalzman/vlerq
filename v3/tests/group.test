#!/usr/bin/env tclkit
# ratcl grouping tests

source [file join [file dir [info script]] initests.tcl]

# %renumber<^\s*test >%

test 0 {load ratcl} {
  package require ratcl
} 3

test 1 {view exists} -body {
  view
} -returnCodes error -result {wrong # args: should be "view v ... | ..."}

test 2 {} {
  set G [view A:I vdef {0 1 2 3 4 5}]
  vlerq::vgroup di $G $G
} {{0 1 2 3 4 5} {0 1 2 3 4 5} {0 1 2 3 4 5}}

test 3 {} {
  set G [view {A:I B:I} vdef {0 1 2 0 1 2} {4 4 4 4 4 5}]
  vlerq::vgroup di $G $G
} {{0 1 2 5} {0 1 2 0 1 3} {0 1 2 3 4 5}}

test 4 {} {
  set G [view {A B} vdef {0 1 2 0 1 2} {4 4 4 4 4 5}]
  vlerq::vgroup di $G $G
} {{0 1 2 5} {0 1 2 0 1 3} {0 1 2 3 4 5}}

test 5 {} {
  set G [view A:I vdef {0 1 2 3 4 5}]
  vlerq::vgroup dif $G $G
} {{0 1 2 3 4 5} {0 1 2 3 4 5 6 6} {0 1 2 3 4 5} {0 1 2 3 4 5} {0 1 2 3 4 5}}

test 6 {} {
  set G [view {A:I B:I} vdef {0 1 2 0 1 2} {4 4 4 4 4 5}]
  vlerq::vgroup dif $G $G
} {{3 4 2 5} {0 2 4 5 6 6} {0 3 1 4 2 5} {0 1 2 0 1 3} {0 1 2 3 4 5}}

test 7 {} {
  set G [view {A B} vdef {0 1 2 0 1 2} {4 4 4 4 4 5}]
  vlerq::vgroup dif $G $G
} {{3 4 2 5} {0 2 4 5 6 6} {0 3 1 4 2 5} {0 1 2 0 1 3} {0 1 2 3 4 5}}

test 8 {} {
  set G [view A:I vdef {0 1 1 1 2 3 3 4 5 5}]
  set H [view A:I vdef {0 1 2 3 4 3 6 7}]
  vlerq::vgroup di $G $H
} {{0 1 4 5 7 8} {0 1 2 3 4 3 6 6} {0 1 2 3 4 5}}

test 9 {} {
  set G [view A:I vdef {0 1 1 1 2 3 3 4 5 5}]
  set H [view A:I vdef {0 1 2 3 4 3 6 7}]
  vlerq::vgroup dif $G $H
} {{0 3 4 6 7 9} {0 1 4 5 7 8 10 10} {0 1 2 3 4 5 6 7 8 9}\
   {0 1 2 3 4 3 6 6} {0 1 2 3 4 5}}

test 10 {} {
  set G [view A:I vdef {0 1 1 1 2 3 3 4 5 5}]
  vlerq::vgroup di $G $G
} {{0 1 4 5 7 8} {0 1 1 1 2 3 3 4 5 5} {0 1 2 3 4 5 6 7 8 9}}

test 11 {} {
  set G [view A:I vdef {0 1 1 1 2 3 3 4 5 5}]
  vlerq::vgroup dif $G $G
} {{0 3 4 6 7 9} {0 1 4 5 7 8 10 10} {0 1 2 3 4 5 6 7 8 9}\
   {0 1 1 1 2 3 3 4 5 5} {0 1 2 3 4 5 6 7 8 9}}

test 12 {setup test data} {
  set R [view {A B C}   vdef {a b c d a f c b d}]
  set S [view {D E F}   vdef {b g a d a f}]
  set T [view {A B C D} vdef {a b c d a b e f b c e f e d c d e d e f a b d e}]
  set U [view {C D E}   vdef {c d e c d f d e f}]
  set V [view {C D}     vdef {c d e f}]
  set W [view {A B C}   vdef {1 2 3 a b c}]
  set X [view {D E:I F} vdef {a 100 aa b 20 bb c 3 cc}]
  set Y [view D         vdef {y}]
  set Z [view E         vdef {}]
  set r {}
  foreach v {R S T U V W X Y Z} { lappend r [vget [set $v] #] }
  set r
} {3 2 6 3 2 2 3 1 0}

test 13 {group} {
  set v [view $T group A B G]
  list [view $v names] [view $v structure] [view $v project A B | get]
} {{A B G} SS(SS) {a b b c e d}}

test 14 {group subview structure} {
  set v [view $T group A B G | get 0 -1]
  list [view $v names] [view $v structure] [view $v get]
} {{C D} SS {c d e f d e}}

test 15 {group subview contents} {
  set v [view $T group A B G]
  set g0 [vget $v 0 -1]
  set g1 [vget $v 1 -1]
  set g2 [vget $v 2 -1]
  list [vget $g0] [vget $g1] [vget $g2]
} {{c d e f d e} {e f} {c d e f}}

test 16 {group subview contents} {
  set v [view $T group A B G]
  list [view $v get 0 -1 * *] \
	     [view $v get 1 -1 * *] \
	     [view $v get 2 -1 * *]
} {{c d e f d e} {e f} {c d e f}}

test 17 {no cols} tcl8.4 {
  set v [view $V group G]
  list [view $v get #] [view $v get 0 -1 #] [view $v get 0 -1 * *]
} {1 2 {c d e f}}

test 18 {group subview structure, named} {
  set v [view $T group A B G | get 0 G]
  list [view $v names] [view $v structure] [view $v get]
} {{C D} SS {c d e f d e}}

test 19 {group subview contents, named} {
  set v [view $T group A B G]
  list [view $v get 0 G * *] \
	     [view $v get 1 G * *] \
	     [view $v get 2 G * *]
} {{c d e f d e} {e f} {c d e f}}

test 20 {no cols, named} tcl8.4 {
  set v [view $V group G]
  list [view $v get #] [view $v get 0 G #] [view $v get 0 G * *]
} {1 2 {c d e f}}

test 21 {group input} {
  view $T group A B G | dump
} { \
  A  B  G 
  -  -  --
  a  b  #3
  b  c  #1
  e  d  #2}

test 22 {ungroup} {
  set v [view $T group A B G | ungroup G]
  list [view $v names] [view $v structure] [view $v get]
} {{A B C D} SSSS {a b c d a b e f a b d e b c e f e d c d e d e f}}

test 23 {ungroup} {
  set w [view {a b} vdef]
  set w [view $w concat [view {a b} vdef {1 2 1 3 1 4 2 5}]]
  set v [view $w group a j | ungroup j]
  list [view $v names] [view $v structure] [view $v get]
} {{a b} SS {1 2 1 3 1 4 2 5}}

test 24 {join without subviews} {
  set v [view $T join $U J | mapcols -omit J]
  list [view $v names] [view $v structure] [view $v get]
} {{A B C D} SSSS {a b c d a b e f b c e f e d c d e d e f a b d e}}

test 25 {join structure} {
  set v [view $T join $U J]
  list [view $v names] [view $v structure] [vget $v #]
} {{A B C D J} SSSS(S) 6}

test 26 {join and ungroup} {
  set v [view $T join $U J | ungroup J]
  list [view $v names] [view $v structure] [view $v get]
} {{A B C D E} SSSSS {a b c d e a b c d f e d c d e e d c d f a b d e f}}

test 27 {join_i} {
  set v [view $T join_i $U]
  list [view $v names] [view $v structure] [view $v get]
} {{A B C D E} SSSSS {a b c d e a b c d f e d c d e e d c d f a b d e f}}

test 28 {multiple join columns} {
  set v [view {A B C:I} vdef { x r -1
			x d  0 }]
  set w [view {B C:I D E:I} vdef { r -1 aa  5
			                             d  0 ff  4
			                             d  0 eee 3 }]
  view $v join $w J | pair [view F vdef {f f2}] | ungroup J | dump
} { \
  A  B  C   F   D    E
  -  -  --  --  ---  -
  x  r  -1  f   aa   5
  x  d   0  f2  ff   4
  x  d   0  f2  eee  3}

test 29 {no common columns} tcl8.4 {
  set v [view $W join $S J | ungroup J]
  list [view $v names] [view $v structure] [view $v get]
} {{A B C D E F} SSSSSS {1 2 3 b g a 1 2 3 d a f a b c b g a a b c d a f}}

test 30 {setup a nested test} -body {
  set v [view {A B C} vdef {a b c} | group A B Y]
  puts [view $v dump]
  puts [view $v get 0 Y | dump]
  list [view $v struct_mk] \
       [view $v get 0 Y | struct_mk]
} -output { \
  A  B  Y 
  -  -  --
  a  b  #1
  C
  -
  c
} -result {{A:S,B:S,Y[C:S]} C:S}

test 31 {verify sub path} {
  view $v get 0 Y
} {at {group {vdef {A B C} {a b c}} A B Y} 0 2}

test 32 {setup a more deeply nested test} -body {
  set v [view {A B C} vdef {a b c} | group A B Y | group A X]
  puts [view $v dump]
  puts [view $v get 0 X | dump]
  puts [view $v get 0 X 0 Y | dump]
  list [view $v struct_mk] \
       [view $v get 0 X | struct_mk] \
       [view $v get 0 X 0 Y | struct_mk]
} -output { \
  A  X 
  -  --
  a  #1
  B  Y 
  -  --
  b  #1
  C
  -
  c
} -result {{A:S,X[B:S,Y[C:S]]} {B:S,Y[C:S]} C:S}

test 33 {verify sub path} {
  view $v get 0 X
} {at {group {group {vdef {A B C} {a b c}} A B Y} A X} 0 1}

test 34 {verify sub-sub path} xx {
  view $v get 0 X 0 Y
} {at {at {group {group {vdef {A B C} {a b c}} A B Y} A X} 0 1} 0 1}

ratcl::vopdef extend {v colname expr} {
 view $v pair [view $v collect $expr | asview $colname]
}

test 35 {ungroup bt email 23-11-2006} {
  set v [view {a b} vdef {1 {2 3 4} 2 {3 4 5} 3 4} | \
    extend c:V {[view d vdef $(b)]}]
  view $v dump
} { \
  a  b      c 
  -  -----  --
  1  2 3 4  #3
  2  3 4 5  #3
  3  4      #1}
  
test 36 {} {
  view $v freeze | dump
} { \
  a  b      c 
  -  -----  --
  1  2 3 4  #3
  2  3 4 5  #3
  3  4      #1}
  
test 37 {} {
  view $v get 0 c | dump
} { \
  d
  -
  2
  3
  4}
  
test 38 {} {
  # freeze has "?" as col name, unless extend is given exact subview structure
  set v [view {a b} vdef {1 {2 3 4} 2 {3 4 5} 3 4} | \
    extend {c d} {[view d vdef $(b)]}]
  view $v freeze | get 0 c | dump
} { \
  d
  -
  2
  3
  4}
  
test 39 {} {
  view $v ungroup c | dump
} { \
  a  b      d
  -  -----  -
  1  2 3 4  2
  1  2 3 4  3
  1  2 3 4  4
  2  3 4 5  3
  2  3 4 5  4
  2  3 4 5  5
  3  4      4}
  
::tcltest::cleanupTests
