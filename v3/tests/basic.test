#!/usr/bin/env tclkit
# basic sanity checks

source [file join [file dir [info script]] initests.tcl]

# default uses a test file with matching byte order (see also endian.test)
if {![info exists testfile]} {
  switch $tcl_platform(byteOrder) {
    littleEndian { set testfile l.kit }
    bigEndian { set testfile l.kit-be }
  }
}

# %renumber<^\s*test >%

test 0 {load extension} {
  package require vlerq
} 3

test 1 {vget exists} -body {
  vget
} -returnCodes error -result {wrong # args: should be "vget view ..."}

test 2 {map file} {
  set root [view [file dirname [info script]]/$testfile mapf]
#puts HAHA-$root
  view $root get #
} 1

set meta [view $root get @]

test 3 {meta view} {
  view $meta get #
} 1

test 4 {get column names of root} {
  view $meta get * name
} {dirs}

test 5 {meta meta view} {
  view $meta get @ #
} 3

test 6 {get column names of meta view} {
  view $meta get @ * name
} {name type subv}

set dirs [view $root get 0 dirs]

test 7 {subview access} {
  view $dirs get #
} 4

test 8 {subview column names} {
  view $dirs get @ * name
} {name parent files}

test 9 {subview column types} {
  view $dirs get @ * type
} {S I V}

test 10 {int column} {
  view $dirs get * parent
} {-1 0 1 1}

test 11 {row access} -body {
  view $dirs get 1
} -match glob -result {name lib parent 0 files {at {at {mapf *} 0 0} 1 2}}

test 12 {full access} -body {
  view $dirs get
} -match glob -result {<root> -1 * lib 0 * app-listk 1 * cgi1.6 1 *}

test 13 {list of rows} -body {
  view $dirs get *
} -match glob -result {{<root> -1 *} {lib 0 *} {app-listk 1 *} {cgi1.6 1 *}}

# must sort results because order differs in big- and little-endian test files

test 14 {nested access} {
  lsort [view $dirs get 3 files * name]
} {cgi.tcl pkgIndex.tcl}

test 15 {short ints} {
  view $dirs get 3 files * size
  # don't sort, to make sure both endianness tests really have different data
} [expr {$testfile eq "l.kit" ? "532 65885" : "65885 532"}]

test 16 {long ints} {
  view $dirs get 3 files * date
} {1020940611 1020940611}

test 17 {binary column} {
  set r {}
  foreach x [view $dirs get 3 files * contents] {
    lappend r [string length $x]
  }
  lsort $r
} {15621 317}

test 18 {root view access bug, ok} {
  set fn [file dirname [info script]]/$testfile
  vget [list mapf $fn] @ * 0
} dirs
  
test 19 {subview access bug, ok} {
  vget [list mapf $fn] 0 dirs @ * 0
} {name parent files}
  
test 20 {subview access bug, was bad} {
  vget [list at [list mapf $fn] 0 0] @ * 0
} {name parent files}
  
test 21 {subview access bug, bad results} -body {
  vget [list at [list mapf $fn] 0 0]
} -match glob -result {<root> -1 {at {at {mapf *} 0 0} 0 2}\
                           lib 0 {at {at {mapf *} 0 0} 1 2}\
                     app-listk 1 {at {at {mapf *} 0 0} 2 2}\
                        cgi1.6 1 {at {at {mapf *} 0 0} 3 2}}
  
test 22 {sub-subview access bug, ok} {
  vget [list mapf $fn] 0 dirs 0 files @ * 0
} {name size date contents}
  
test 23 {sub-subview access bug, was bad} {
  vget [list at [list at [list mapf $fn] 0 0] 0 2] @ * 0
} {name size date contents}
  
test 24 {sub-subview access bug, bad results} -body {
  # sort results so this test works regardless of the ChangeLog/main.tcl order
  lsort [vget [list at [list at [list mapf $fn] 0 0] 0 2]]
} -match glob -result {1039266154 1046092593 167 67 ChangeLog main.tcl *}
  
::tcltest::cleanupTests
