#!/usr/bin/env tclkit
# demos used on web pages and in other documentation

source [file join [file dir [info script]] initests.tcl]

# %renumber<^\s*test >%

test 0 {load extension} {
  package require ratcl
} 3

test 1 {vops array exists} {
  info exists ::vops
} 1

test 2 {} {
  set ::vops(ex1) {ex1-init ex1-sizer ex1-getter}
  
  proc ex1-init {size args} {
    list ex1 [view $args mdef] $size
  }
  proc ex1-sizer {type meta size} {
    return $size
  }
  proc ex1-getter {type meta size row col} {
    return "This is row $row, column [vget $meta $col name]"
  }
  
  set v [view 7 ex1 A B C]
  list [vget $v #] [vget $v 3 B] [view $v names] [view $v types]
} {7 {This is row 3, column B} {A B C} {S S S}}
  
test 3 {} {
  ratcl::vopdef ex2 {
    init {size args} {
      list ex2 [view $args mdef] $size
    }
    sizer {type meta size} {
      return $size
    }
    getter {type meta size row col} {
      return "This is row $row, column [vget $meta $col name]"
    }
  }
  
  set v [view 7 ex2 A B C]
  list [vget $v #] [vget $v 3 B] [vget $v @ * 0] [view $v types]
} {7 {This is row 3, column B} {A B C} {S S S}}

test 4 {} tcl8.5 {
  set ::vops(sort1) {sort1-init sort1-sizer sort1-getter}

  proc sort1-init {vin} {
    list sort1 [vget $vin @] $vin [lsort -indices [vget $vin * 0]]
  }
  proc sort1-sizer {type meta vin sortmap} {
    return [vget $vin #]
  }
  proc sort1-getter {type meta vin sortmap row col} {
    return [vget $vin [lindex $sortmap $row] $col]
  }
  
  set v [view {A B} vdef {3 three 0 zero 1 one 4 four 2 two}]
  set w [view $v sort1]
  list [vget $w #] [vget $w 0] [vget $w *]
} {5 {A 0 B zero} {{0 zero} {1 one} {2 two} {3 three} {4 four}}}
  
test 5 {} tcl8.5 {
  set ::vops(sort2) sort2-init

  proc sort2-init {vin} {
    view $vin remap [lsort -indices [vget $vin * 0]]
  }
  
  set v [view {A B} vdef {3 three 0 zero 1 one 4 four 2 two}]
  set w [view $v sort2]
  list [vget $w #] [vget $w 0] [vget $w *]
} {5 {A 0 B zero} {{0 zero} {1 one} {2 two} {3 three} {4 four}}}

test 6 {} {
  set R {vdef {A B C} {a b c d a f c b d}}
  view $R dump
} { \
  A  B  C
  -  -  -
  a  b  c
  d  a  f
  c  b  d}

test 7 {} {
  view $R remap {2 0}
} {remap {vdef {A B C} {a b c d a f c b d}} {2 0}} 
  
test 8 {} {
  view $R remap {2 0} | dump
} { \
  A  B  C
  -  -  -
  c  b  d
  a  b  c} 
  
test 9 {} {
  view $R remap {2 0} | mapcols C A
} {mapcols {remap {vdef {A B C} {a b c d a f c b d}} {2 0}} C A}
  
test 10 {} {
  view $R remap {2 0} | mapcols C A | dump
} { \
  C  A
  -  -
  d  c
  c  a} 

test 11 {factorial} {
  view N vdef {1 2 3 4 5} | prod N
} 120

test 12 {inverse permutation via vdef} {
  view N:I vdef {5 2 3 4 1 8 0 9 6 7} | sortmap
} {6 4 1 2 3 0 8 9 5 7}
  
test 13 {inverse permutation via asview} {
  view {5 2 3 4 1 8 0 9 6 7} asview N:I | sortmap
} {6 4 1 2 3 0 8 9 5 7}
  
::tcltest::cleanupTests
