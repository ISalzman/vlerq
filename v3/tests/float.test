#!/usr/bin/env tclkit
# floating point tests

source [file join [file dir [info script]] initests.tcl]

# %renumber<^\s*test >%

test 0 {load extension} {
  package require ratcl
} 3

test 1 {float type} {
  view A:F vdef {1.2 34.5} | struct_mk
} A:F

test 2 {float dump} {
  view A:F vdef {1.2 34.5} | dump
} { \
  A   
  ----
   1.2
  34.5}

test 3 {float save} {
  string length [view A:F vdef {1.2 34.5} | save]
} 40
  
test 4 {float freeze} -body {
  view A:F vdef {1.2 34.5} | freeze | get
} -match glob -result {1.20000* 34.5}
  
test 5 {double save} {
  string length [view A:D vdef {1.2 34.5} | save]
} 48
  
test 6 {double freeze} {
  view A:D vdef {1.2 34.5} | freeze | get
} {1.2 34.5}

test 7 {save to file} {
  set v [view {f:F d:D l:L} vdef {1.2 1.23456789 1234567654321
                                  34.5 1234567.8 876543212345678}]
  view $v group v | save temp0.db
} 91

test 8 {read back saved data} -body {
  puts [view temp0.db open | get 0 v | dump]
} -match glob -output { \
  f              d           l              
  -------------  ----------  ---------------
  1.20000??????  1.23456789    1234567654321
           34.5   1234567.8  876543212345678
} -cleanup { file delete temp0.db }

test 9 {save other types} -constraints metakit -body {
  # the mk::* commands get clobbered by mklite.test, so run this in float.test !
  mk::file open db temp5.db
  mk::view layout db.v {f:F d:D l:L}
  mk::view size db.v 0
  mk::row append db.v f 1.2 d 1.23456789 l 1234567654321
  mk::row append db.v f 34.5 d 1234567.8 l 876543212345678
  mk::file close db
  file size temp5.db
} -result 91

test 10 {read back other types} -constraints metakit -body {
  puts [view temp5.db open | get 0 v | dump]
} -match glob -output { \
  f              d           l              
  -------------  ----------  ---------------
  1.20000??????  1.23456789    1234567654321
           34.5   1234567.8  876543212345678
} -cleanup { file delete temp5.db }
  
::tcltest::cleanupTests
