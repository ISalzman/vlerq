#!/usr/bin/env tclkit
# %renumber<^\s*test >%

source [file join [file dir [info script]] initests.tcl]

test 0 {} {
    package require tvq
} $version

interp alias {} lua {} tvq dostring         ;# evaluate string in lua
lua { package.loaded['lvq.core'] = lvq }    ;# emulate module setup

test 1 {perform a basic call} {
    lua {return type(123)}
} number

test 2 {check Lua version} {
    lua {return _VERSION}
} {Lua 5.1}

test 3 {} skip {
    lua { print "Hello from Tcl!" }
} {}

test 4 {run the lvq.lua wrapper} {
    # emulate a require, but from a specific file
    lua { loadfile('../lvq/src/lvq.lua')('lvq') }
} {}

test 5 {lua error handling} {
    list [catch { lua {assert(nil,'boom!')} } e] $e
} {1 {[string "assert(nil,'boom!')"]:1: boom!}}

test 6 {string evaluation in lua} {
    lua { return 1+2*3 }
} 7

test 7 {} skip {
    lua { dofile '../lvq/tests/test.lua' }
} {}

test 8 {tcl callback} {
    lua { tcl('return','a b c') }
} "a b c"

test 9 {errors in tcl callback} {
    list [catch { lua tcl('set') } e] $e
} {1 {[string "tcl('set')"]:1:\
        tvq: wrong # args: should be "set varName ?newValue?"}}

test 10 {output in tcl callback} -body {
    lua { tcl('puts','Hello from Lua!') }
} -output "Hello from Lua!\n"

test 11 {error in lua} {
    list [catch { lua io() } e] $e
} {1 {[string "io()"]:1: attempt to call global 'io' (a table value)}}

test 12 {fetch entry from vops table} -body {
    lua { return tostring(vops.meta) }
} -match glob -result {function: 0x*}

::tcltest::cleanupTests
